{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let ContainerDirective = /*#__PURE__*/(() => {\n  class ContainerDirective {\n    constructor(host, zone) {\n      this.host = host;\n      this.zone = zone;\n      this.prevLowest = 0;\n    }\n\n    ngOnInit() {\n      this.observer = new ResizeObserver(entries => {\n        this.zone.run(() => {\n          // run in angular zone\n          this.updateCurrentClass(entries[0].contentRect.width);\n        });\n      });\n      this.observer.observe(this.host.nativeElement);\n    }\n\n    updateCurrentClass(width) {\n      this.host.nativeElement.classList.remove('container-fluid');\n      const items = this.inputs.split(',');\n      let className = 'container'; //find first item that is not a number and set it as the class name\n\n      for (let i = 0; i < items.length; i++) {\n        if (isNaN(Number(items[i]))) {\n          className = items[i];\n          break;\n        }\n      } // find all numbers in array and sort them greatest to smallest\n\n\n      const sortedNumbers = items.filter(item => {\n        return !isNaN(Number(item));\n      }).sort((a, b) => {\n        return b - a;\n      }); // find lowest value in array greater than width\n\n      let lowest = sortedNumbers.find(item => {\n        return item < width;\n      }); // if lowest is not found, set to the last item (smalles) in the array\n\n      if (!lowest) {\n        lowest = sortedNumbers[sortedNumbers.length - 1];\n      } // if the lowest value is not the same as the previous value, set the class\n\n\n      if (lowest && this.prevLowest !== lowest) {\n        this.host.nativeElement.classList.remove(`${className}-${this.prevLowest}`);\n        this.host.nativeElement.classList.add(`${className}-${lowest}`);\n        this.prevLowest = lowest;\n      }\n    }\n\n    ngOnDestroy() {\n      this.observer.unobserve(this.host.nativeElement);\n    }\n\n  }\n\n  ContainerDirective.ɵfac = function ContainerDirective_Factory(t) {\n    return new (t || ContainerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n\n  ContainerDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ContainerDirective,\n    selectors: [[\"\", \"container\", \"\"]],\n    inputs: {\n      inputs: [\"container\", \"inputs\"]\n    }\n  });\n  return ContainerDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}